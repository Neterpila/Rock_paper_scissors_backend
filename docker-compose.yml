version: "3"
services:
  mongodb:
    container_name: mongodb
    image: mongo:5.0
    ports:
      - "${MONGO_PORT}:27017"
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_DB}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - ./services/mongodb/data:/data/db:rw
    command: 
      - '--logpath'
      - '/dev/null'

  auth:
    container_name: auth
    build: ./services/auth
    ports: 
      - "3002:8080"
    environment:
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - JWT_SECRET=${AUTH_JWT_SECRET}
      - BCRYPT_SALT_ROUNDS=${AUTH_BCRYPT_SALT_ROUNDS}
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 3

  api_gateway:
    container_name: api_gateway
    build: ./services/api_gateway
    ports: 
      - "${GATEWAY_PORT}:8080"
    environment:
      - DEBUG_LOG=true
      - AUTH_SERVICE_HOSTNAME=auth
      - LOBBY_SERVICE_HOSTNAME=lobby
      - GAME_SERVICE_HOSTNAME=game
    depends_on:
      lobby:
        condition: "service_healthy"
      auth:
        condition: "service_healthy"
      # todo: add a healthchek for game and another condition
      
  lobby:
    container_name: lobby
    build: ./services/lobby
    ports: 
      - "${LOBBY_PORT}:8080"
    environment:
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - GAME_SERVICE_HOSTNAME=game
      - DEBUG_LOG=true
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 3
  
  game:
    container_name: game
    build: ./services/game
    ports: 
      - "${GAME_PORT}:8080"
    environment:
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
    depends_on:
      - mongodb

  swagger:
    container_name: swagger
    profiles:
      - swagger
    build: ./services/swagger
    expose:
      - ${SWAGGER_PORT}
    ports:
      - ${SWAGGER_PORT}:8080
    depends_on:
      - api_gateway
    environment:
      - SWAGGER_JSON=/swagger.yaml

  prometheus:
    container_name: prometheus
    profiles:
      - monitoring
    image: prom/prometheus
    volumes:
      - ./services/prometheus/config.yml:/etc/prometheus/prometheus.yml:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - ${PROMETHEUS_PORT}:9090

  cadvisor:
    container_name: cadvisor
    profiles:
      - monitoring
    image: gcr.io/cadvisor/cadvisor
    ports:
      - ${CADVISOR_PORT}:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

  grafana:
    container_name: grafana
    profiles:
      - monitoring
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_pass
    volumes:
      - ./services/grafana/data:/var/lib/grafana:rw
    depends_on:
      - prometheus
    ports:
      - ${GRAFANA_PORT}:3000

  node-exporter:
    container_name: node_exporter
    profiles:
      - monitoring
    image: prom/node-exporter
    ports:
      - ${NODE_EXPORTER_PORT}:9100