version: "3"

services:
  mongodb:
    image: mongo:5.0
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_DB}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - ./services/mongodb/data:/data/db:rw
    # command: 
      # - '--logpath'
      # - '/dev/null'
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
      placement:
        constraints: [node.role == manager]
    networks:
      - rps_int

  auth:
    image: neterpila/rock_paper_scissors_auth
    environment:
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - JWT_SECRET=${AUTH_JWT_SECRET}
      - BCRYPT_SALT_ROUNDS=${AUTH_BCRYPT_SALT_ROUNDS}
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 3
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_int

  api_gateway:
    image: neterpila/rock_paper_scissors_api_gateway
    ports: 
      - "${GATEWAY_PORT}:8080"
    environment:
      - DEBUG_LOG=false
      - AUTH_SERVICE_HOSTNAME=auth
      - LOBBY_SERVICE_HOSTNAME=lobby
      - GAME_SERVICE_HOSTNAME=game
    depends_on:
      - lobby
      - auth
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_int
      - rps_ext
      
  lobby:
    image: neterpila/rock_paper_scissors_lobby
    environment:
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - GAME_SERVICE_HOSTNAME=game
      - DEBUG_LOG=false
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 3
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_int
  
  game:
    image: neterpila/rock_paper_scissors_game
    environment:
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - DEBUG_LOG=false
    depends_on:
      - mongodb
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_int

  swagger:
    image: neterpila/rock_paper_scissors_swagger
    ports:
      - ${SWAGGER_PORT}:8080
    depends_on:
      - api_gateway
    environment:
      - SWAGGER_JSON=/swagger.yaml
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_ext

  prometheus:
    image: prom/prometheus
    volumes:
      - ./services/prometheus/config.yml:/etc/prometheus/prometheus.yml:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_int

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_int

  grafana:
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASS}
    volumes:
      - ./services/grafana/data:/var/lib/grafana:rw
      - ./services/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    ports:
      - ${GRAFANA_PORT}:3000
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_int
      - rps_ext

  node-exporter:
    image: prom/node-exporter
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_int

  loki:
    image: grafana/loki
    volumes:
      - ./services/loki/data:/loki
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_int

  promtail:
    image: grafana/promtail
    volumes:
      - ./services/promtail/config.yaml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    networks:
      - rps_int

networks:
  rps_ext:
    external: true
  rps_int:
    external: false
