openapi: 3.0.0
info:
  title: Rock Paper Scissors API
  description: >-
    This documentation only describes http endpoints available on the backend. For info on WebSocket endpoints please visit READMEs:
    [Lobby](https://github.com/Neterpila/Rock_paper_scissors_backend/tree/master/services/lobby)
    [Game](https://github.com/Neterpila/Rock_paper_scissors_backend/tree/master/services/game)
  version: 0.1.0
servers:
  - url: http://localhost:8080
    description: Local

tags:
  - name: user
    description: Registering and logging in
  - name: lobby
    description: Working with lobbies

paths:
  /register:
    post:
      tags: 
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Created user object along with the access token
          content:
            application/json:
              schema: 
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                        example: "created_user"
                  access_token:
                    description: JWT token required for backend access
                    type: string
                    example: qwe123asd.rty456fgh.uio789jkl
        '400':
          description: Bad request
        '409':
          description: Server conflict - e.g. user already exists

  /login:
    post:
      tags: 
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Access token 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  access_token:
                    description: JWT token required for backend access
                    type: string
                    example: qwe123asd.rty456fgh.uio789jkl
        '400':
          description: Bad request
        '401':
          description: Invalid credentials

  /lobby:
    get:
      description: Returns a JSON array of lobbies, where 'users' are the users currently connected to that lobby.
      tags: 
        - lobby
      responses:
        '200':
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Lobby'

    post:
      description: Used to create a new lobby.
      tags: 
        - lobby
      security:
        - jwt: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lobby'
        required: true
      responses:
        '201':
          description: Created lobby
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/unauthorized'

    delete:
      description: Used to delete a lobby by id. Only an owner can delete their lobbies.
      tags: 
        - lobby
      security:
        - jwt: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                lobby_id:
                  type: string
        required: true
      responses:
        '204':
          description: Deleted lobby
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/unauthorized'


components:
  schemas:
    User:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          example: the_dude_lebowski
        password:
          type: string
          example: my_top_secret_password_123
    Lobby:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: my first lobby
        password:
          type: string
          example: my_lobby_password
          desctription: Lobby can be password protected, so only certain users will be able to join it

  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    unauthorized:
      description: Access token is missing or invalid